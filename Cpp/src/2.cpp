#include<iostream>
#include<queue>
using namespace std;

struct node
{
    int x;//x坐标
    int y;//y坐标
    string p;//记录路径               
};
char a[31][51]; //存储地图数据，可以一行一行输入，a[i]
char k[4]={'D','L','R','U'};
int dir[4][2]={{1,0},{0,-1},{0,1},{-1,0}};
int vis[30][50]; //标记节点是否被搜索过，已经搜索过的就不要再搜了

void BFS()
{
    node start;
    start.x=0;
    start.y=0;
    start.p="";
    vis[0][0]=1; //标注起始点已经被搜过了

    queue<node> q; //创建队列
    q.push(start); //把第一个路径放入

    while (!q.empty())
    {
        node now=q.front();
        // cout<<now.x<<now.y<<endl;
        q.pop();
        if(now.x==29&&now.y==49)
        {
            cout<<"sdjkfh"<<endl;
            cout<<now.p<<endl;
            return;
        }

        for(int i=0;i<4;i++)
        {
            node next;
            next.x=now.x+dir[i][0];
            next.y=now.y+dir[i][1];
            if(next.x<0||next.x>=30||next.y<0||next.y>=50)
            {
                // 当超出地图范围
                continue;
            }
            if(vis[next.x][next.y]==1||a[next.x][next.y]=='1')
            {
                // 当被标记过;或者遇到障碍物
                continue;
            }
            vis[next.x][next.y]=1;
            next.p=now.p+k[i];
            q.push(next);
        }
    }  
}
int main()
{
    for(int i=0; i<30; i++)
    {
        cin>>a[i];
    }
    BFS();
    return 0;
}
/*
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010001001000100010101
10100001000110010001000010101001010101011111010010
00000100101000000110010100101001000001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000
*/
/*
答案
DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDDRRRURRUURRDDDDRDRRRRRRDRRURRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURRRDDRRRRRDDRRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR

DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDDRRRURRUURRDDDDRDRRRRRRDRRURRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURRRDDRRRRRDDRRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR
*/